import "utils/pack/u32/unpack128.zok" as unpack128
import "utils/pack/u32/pack128.zok" as pack128 
import "utils/pack/u32/pack256.zok" as pack256
import "utils/pack/u32/nonStrictUnpack256.zok" as nonStrictUnpack256 //cast field to bool[256] array
import "utils/casts/u32_to_field.zok" as u32_to_field 
import "utils/casts/u32_4_to_bool_128.zok" as u32_to_bool128 
import "utils/casts/u32_8_to_bool_256.zok" as u32_to_bool256 

def xor5u32(u32 input1, u32 input2, u32 input3, u32 input4, u32 input5) -> (u32):
    u32 result = input1 ^ input2
    result = result ^ input3
    result = result ^ input4
    result = result ^ input5
    return result

//25 = width of the permutation
def keccak_f(u32[25][8] A) -> (u32[5][8]):

    u32[8] zeros = [0x00000000; 8]
    u32[25][8] B = [zeros; 25]
    u32[5][8] C = [zeros; 5]
    u32[5][8] D = [zeros; 5]

    //round constant RC
    //field [24] RC = [1, 32898, 9223372036854808714, 9223372039002292224, 32907, 2147483649, 9223372039002292353, 9223372036854808585, 138, 136, 2147516425, 2147483658, 2147516555, 9223372036854775947, 9223372036854808713, 9223372036854808579, 9223372036854808578, 9223372036854775936, 32778, 9223372039002259466, 9223372039002292353, 9223372036854808704, 2147483649, 9223372039002292232]

    for field ii in 0..24 do

        for field jj in 0..8 do
        
        // C
        C[0][jj] = xor5u32(A[0][jj], A[1][jj], A[2][jj], A[3][jj], A[4][jj])
        C[1][jj] = xor5u32(A[5][jj], A[6][jj], A[7][jj], A[8][jj], A[9][jj])
        C[2][jj] = xor5u32(A[10][jj], A[11][jj], A[12][jj], A[13][jj], A[14][jj])
        C[3][jj] = xor5u32(A[15][jj], A[16][jj], A[17][jj], A[18][jj], A[19][jj])
        C[4][jj] = xor5u32(A[20][jj], A[21][jj], A[22][jj], A[23][jj], A[24][jj])

        //D


        //D[0]=C[4] ^ ((C[1] * 2)&0xffffffffffffffff | (C[1] / (2 ** 63)));
        // &0xffffffffffffffff means taking the last 8 bytes (8 bytes on the right)

        //Oss: C e' una matrice!!!! 
        // usare variabile ausiliaria per gestire moltiplicazione per 2 
        // usare variabile ausiliaria per gestire divisione per 2**63
        // casting to booleans or to fields?
        //D[0] =  C[4] ^ ((C[1]*2)&0xffffffffffffffff ^ )


        endfor

    endfor

    return C

def main() -> (field[5]):

    field[25] A_field = [1,2,3,4,5,6,7,0,0,0,0,0,0,12,13,0,0,0,0,0,0,0,3,2,1] 

    //cast from field[25] to u32[25][8]
    u32[8] zeros = [0x00000000; 8]
    u32[25][8] A_u32_8 = [zeros; 25]

    for field kk in 0..25 do

        u32[8] tempForCasting = nonStrictUnpack256(A_field[kk])

        for field jj in 0..8 do
    
            A_u32_8[kk][jj] = tempForCasting[jj]
    
        endfor

    endfor

    u32[5][8] returnedvalue = keccak_f(A_u32_8)
    //cast back from u32 to field
    field[5] back_to_field = [pack256(returnedvalue[0]), pack256(returnedvalue[1]),pack256(returnedvalue[2]),pack256(returnedvalue[3]),pack256(returnedvalue[4])]
    return back_to_field